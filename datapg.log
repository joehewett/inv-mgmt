2020-12-01 22:16:59.085 GMT [24910] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit
2020-12-01 22:16:59.093 GMT [24910] LOG:  listening on Unix socket "/dcs/19/u1813151/Documents/cs258/postgres/tmp/.s.PGSQL.5432"
2020-12-01 22:16:59.128 GMT [25000] LOG:  database system was shut down at 2020-11-03 04:11:59 GMT
2020-12-01 22:16:59.147 GMT [24910] LOG:  database system is ready to accept connections
2020-12-01 22:22:00.372 GMT [39328] FATAL:  database "deptstore" does not exist
2020-12-01 22:22:20.196 GMT [1693] FATAL:  database "deptstore" does not exist
2020-12-02 10:53:43.347 GMT [25004] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-02 11:40:45.749 GMT [5022] ERROR:  table "inventory" does not exist
2020-12-02 11:40:45.749 GMT [5022] STATEMENT:  DROP TABLE inventory CASCADE;
2020-12-02 11:40:45.820 GMT [5022] ERROR:  column "Cap" does not exist at character 34
2020-12-02 11:40:45.820 GMT [5022] STATEMENT:  INSERT INTO inventory VALUES (1, "Cap", 10.5, 5);
2020-12-02 11:40:45.820 GMT [5022] ERROR:  table "orders" does not exist
2020-12-02 11:40:45.820 GMT [5022] STATEMENT:  DROP TABLE orders CASCADE;
2020-12-02 11:40:45.837 GMT [5022] ERROR:  table "order_products" does not exist
2020-12-02 11:40:45.837 GMT [5022] STATEMENT:  DROP TABLE order_products CASCADE;
2020-12-02 11:40:45.862 GMT [5022] ERROR:  table "deliveries" does not exist
2020-12-02 11:40:45.862 GMT [5022] STATEMENT:  DROP TABLE deliveries CASCADE;
2020-12-02 11:40:45.867 GMT [5022] ERROR:  table "collections" does not exist
2020-12-02 11:40:45.867 GMT [5022] STATEMENT:  DROP TABLE collections CASCADE;
2020-12-02 11:40:45.884 GMT [5022] ERROR:  table "staff" does not exist
2020-12-02 11:40:45.884 GMT [5022] STATEMENT:  DROP TABLE staff CASCADE;
2020-12-02 11:40:45.884 GMT [5022] ERROR:  column "orderid" named in key does not exist at character 148
2020-12-02 11:40:45.884 GMT [5022] STATEMENT:  CREATE TABLE staff (
	    StaffID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    primary key (OrderID)
	);
2020-12-02 11:40:45.884 GMT [5022] ERROR:  table "staff_orders" does not exist
2020-12-02 11:40:45.884 GMT [5022] STATEMENT:  DROP TABLE staff_orders CASCADE;
2020-12-02 11:40:45.889 GMT [5022] ERROR:  relation "staff" does not exist
2020-12-02 11:40:45.889 GMT [5022] STATEMENT:  CREATE TABLE staff_orders (
	    StaffID         integer not null,
	    OrderID         integer not null,
	    foreign key (StaffID) references staff(StaffID),
	    foreign key (OrderID) references orders(OrderID) 
	);
2020-12-02 11:41:51.407 GMT [5022] ERROR:  column "Cap" does not exist at character 92
2020-12-02 11:41:51.407 GMT [5022] STATEMENT:  INSERT INTO inventory(ProductID, ProductDesc, ProductPrice, ProductStockAmount) VALUES (1, "Cap", 10.5, 5);
2020-12-02 11:41:51.473 GMT [5022] ERROR:  table "staff" does not exist
2020-12-02 11:41:51.473 GMT [5022] STATEMENT:  DROP TABLE staff CASCADE;
2020-12-02 11:41:51.474 GMT [5022] ERROR:  column "orderid" named in key does not exist at character 148
2020-12-02 11:41:51.474 GMT [5022] STATEMENT:  CREATE TABLE staff (
	    StaffID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    primary key (OrderID)
	);
2020-12-02 11:41:51.475 GMT [5022] ERROR:  table "staff_orders" does not exist
2020-12-02 11:41:51.475 GMT [5022] STATEMENT:  DROP TABLE staff_orders CASCADE;
2020-12-02 11:41:51.480 GMT [5022] ERROR:  relation "staff" does not exist
2020-12-02 11:41:51.480 GMT [5022] STATEMENT:  CREATE TABLE staff_orders (
	    StaffID         integer not null,
	    OrderID         integer not null,
	    foreign key (StaffID) references staff(StaffID),
	    foreign key (OrderID) references orders(OrderID) 
	);
2020-12-02 11:42:36.211 GMT [15166] ERROR:  column "Cap" does not exist at character 92
2020-12-02 11:42:36.211 GMT [15166] STATEMENT:  INSERT INTO inventory(ProductID, ProductDesc, ProductPrice, ProductStockAmount) VALUES (1, "Cap", 10.5, 5);
2020-12-02 11:42:36.288 GMT [15166] ERROR:  table "staff" does not exist
2020-12-02 11:42:36.288 GMT [15166] STATEMENT:  DROP TABLE staff CASCADE;
2020-12-02 11:42:36.288 GMT [15166] ERROR:  column "orderid" named in key does not exist at character 148
2020-12-02 11:42:36.288 GMT [15166] STATEMENT:  CREATE TABLE staff (
	    StaffID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    primary key (OrderID)
	);
2020-12-02 11:42:36.289 GMT [15166] ERROR:  table "staff_orders" does not exist
2020-12-02 11:42:36.289 GMT [15166] STATEMENT:  DROP TABLE staff_orders CASCADE;
2020-12-02 11:42:36.293 GMT [15166] ERROR:  relation "staff" does not exist
2020-12-02 11:42:36.293 GMT [15166] STATEMENT:  CREATE TABLE staff_orders (
	    StaffID         integer not null,
	    OrderID         integer not null,
	    foreign key (StaffID) references staff(StaffID),
	    foreign key (OrderID) references orders(OrderID) 
	);
2020-12-02 11:43:15.236 GMT [18306] ERROR:  table "staff" does not exist
2020-12-02 11:43:15.236 GMT [18306] STATEMENT:  DROP TABLE staff CASCADE;
2020-12-02 11:43:15.236 GMT [18306] ERROR:  column "orderid" named in key does not exist at character 148
2020-12-02 11:43:15.236 GMT [18306] STATEMENT:  CREATE TABLE staff (
	    StaffID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    primary key (OrderID)
	);
2020-12-02 11:43:15.236 GMT [18306] ERROR:  table "staff_orders" does not exist
2020-12-02 11:43:15.236 GMT [18306] STATEMENT:  DROP TABLE staff_orders CASCADE;
2020-12-02 11:43:15.240 GMT [18306] ERROR:  relation "staff" does not exist
2020-12-02 11:43:15.240 GMT [18306] STATEMENT:  CREATE TABLE staff_orders (
	    StaffID         integer not null,
	    OrderID         integer not null,
	    foreign key (StaffID) references staff(StaffID),
	    foreign key (OrderID) references orders(OrderID) 
	);
2020-12-02 11:44:51.292 GMT [18306] ERROR:  table "staff" does not exist
2020-12-02 11:44:51.292 GMT [18306] STATEMENT:  DROP TABLE staff CASCADE;
2020-12-02 11:44:51.307 GMT [18306] ERROR:  table "staff_orders" does not exist
2020-12-02 11:44:51.307 GMT [18306] STATEMENT:  DROP TABLE staff_orders CASCADE;
2020-12-02 14:17:10.420 GMT [24558] ERROR:  relation "inventory" does not exist at character 15
2020-12-02 14:17:10.420 GMT [24558] STATEMENT:  SELECT * FROM inventory
2020-12-02 14:18:40.491 GMT [36263] ERROR:  relation "inventory" does not exist at character 15
2020-12-02 14:18:40.491 GMT [36263] STATEMENT:  SELECT * FROM inventory
2020-12-02 14:21:35.373 GMT [18573] ERROR:  relation "inventory" does not exist at character 15
2020-12-02 14:21:35.373 GMT [18573] STATEMENT:  SELECT * FROM inventory
2020-12-02 14:27:25.961 GMT [18306] ERROR:  syntax error at or near "pager" at character 1
2020-12-02 14:27:25.961 GMT [18306] STATEMENT:  pager
	pager vim;
2020-12-02 14:29:49.246 GMT [7181] ERROR:  relation "public.inventory" does not exist at character 15
2020-12-02 14:29:49.246 GMT [7181] STATEMENT:  SELECT * FROM public.inventory
2020-12-02 14:32:31.912 GMT [33057] ERROR:  relation "orders" does not exist at character 15
2020-12-02 14:32:31.912 GMT [33057] STATEMENT:  SELECT * FROM orders
2020-12-02 14:34:45.810 GMT [7815] ERROR:  table "inventory" does not exist
2020-12-02 14:34:45.810 GMT [7815] STATEMENT:  DROP TABLE inventory CASCADE;
2020-12-02 14:34:45.849 GMT [7815] ERROR:  duplicate key value violates unique constraint "inventory_pkey"
2020-12-02 14:34:45.849 GMT [7815] DETAIL:  Key (productid)=(1) already exists.
2020-12-02 14:34:45.849 GMT [7815] STATEMENT:  INSERT INTO inventory VALUES (1, 2, 3, 4);
2020-12-02 14:34:45.849 GMT [7815] ERROR:  table "orders" does not exist
2020-12-02 14:34:45.849 GMT [7815] STATEMENT:  DROP TABLE orders CASCADE;
2020-12-02 14:34:45.862 GMT [7815] ERROR:  table "order_products" does not exist
2020-12-02 14:34:45.862 GMT [7815] STATEMENT:  DROP TABLE order_products CASCADE;
2020-12-02 14:34:45.878 GMT [7815] ERROR:  table "deliveries" does not exist
2020-12-02 14:34:45.878 GMT [7815] STATEMENT:  DROP TABLE deliveries CASCADE;
2020-12-02 14:34:45.883 GMT [7815] ERROR:  table "collections" does not exist
2020-12-02 14:34:45.883 GMT [7815] STATEMENT:  DROP TABLE collections CASCADE;
2020-12-02 14:34:45.888 GMT [7815] ERROR:  table "staff" does not exist
2020-12-02 14:34:45.888 GMT [7815] STATEMENT:  DROP TABLE staff CASCADE;
2020-12-02 14:34:45.905 GMT [7815] ERROR:  table "staff_orders" does not exist
2020-12-02 14:34:45.905 GMT [7815] STATEMENT:  DROP TABLE staff_orders CASCADE;
2020-12-02 15:13:00.595 GMT [36359] ERROR:  duplicate key value violates unique constraint "inventory_pkey"
2020-12-02 15:13:00.595 GMT [36359] DETAIL:  Key (productid)=(1) already exists.
2020-12-02 15:13:00.595 GMT [36359] STATEMENT:  INSERT INTO inventory VALUES (1, 'testin', 3, 4);
2020-12-02 15:22:15.412 GMT [24910] LOG:  received fast shutdown request
2020-12-02 15:22:15.415 GMT [24910] LOG:  aborting any active transactions
2020-12-02 15:22:15.418 GMT [24910] LOG:  background worker "logical replication launcher" (PID 25006) exited with exit code 1
2020-12-02 15:22:15.418 GMT [25001] LOG:  shutting down
2020-12-02 15:22:15.534 GMT [24910] LOG:  database system is shut down
2020-12-02 15:22:18.505 GMT [20768] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit
2020-12-02 15:22:18.514 GMT [20768] LOG:  listening on Unix socket "/dcs/19/u1813151/Documents/cs258/postgres/tmp/.s.PGSQL.5432"
2020-12-02 15:22:18.545 GMT [20780] LOG:  database system was shut down at 2020-12-02 15:22:15 GMT
2020-12-02 15:22:18.558 GMT [20768] LOG:  database system is ready to accept connections
2020-12-02 15:23:28.961 GMT [20795] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-02 15:34:14.079 GMT [20795] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-02 15:47:14.232 GMT [20795] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-02 16:50:19.289 GMT [7023] ERROR:  quantityissufficient(integer, integer) is not a procedure at character 6
2020-12-02 16:50:19.289 GMT [7023] HINT:  To call a function, use SELECT.
2020-12-02 16:50:19.289 GMT [7023] STATEMENT:  call quantityIsSufficient(1, 2);
2020-12-02 16:50:43.076 GMT [7023] ERROR:  column "matchgoals" does not exist at character 8
2020-12-02 16:50:43.076 GMT [7023] QUERY:  SELECT matchgoals
2020-12-02 16:50:43.076 GMT [7023] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 6 at RETURN
2020-12-02 16:50:43.076 GMT [7023] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:51:06.004 GMT [7023] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:51:06.004 GMT [7023] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS INTEGER LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:51:09.354 GMT [7023] ERROR:  column "matchgoals" does not exist at character 8
2020-12-02 16:51:09.354 GMT [7023] QUERY:  SELECT matchgoals
2020-12-02 16:51:09.354 GMT [7023] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 6 at RETURN
2020-12-02 16:51:09.354 GMT [7023] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:51:11.081 GMT [7023] ERROR:  column "matchgoals" does not exist at character 8
2020-12-02 16:51:11.081 GMT [7023] QUERY:  SELECT matchgoals
2020-12-02 16:51:11.081 GMT [7023] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 6 at RETURN
2020-12-02 16:51:11.081 GMT [7023] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:51:32.585 GMT [29496] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:51:32.585 GMT [29496] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS INTEGER LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:51:35.572 GMT [29496] ERROR:  column "matchgoals" does not exist at character 8
2020-12-02 16:51:35.572 GMT [29496] QUERY:  SELECT matchgoals
2020-12-02 16:51:35.572 GMT [29496] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 6 at RETURN
2020-12-02 16:51:35.572 GMT [29496] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:51:38.434 GMT [29496] ERROR:  column "matchgoals" does not exist at character 8
2020-12-02 16:51:38.434 GMT [29496] QUERY:  SELECT matchgoals
2020-12-02 16:51:38.434 GMT [29496] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 6 at RETURN
2020-12-02 16:51:38.434 GMT [29496] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:52:04.947 GMT [36110] ERROR:  function quantityissufficient(integer, integer) does not exist at character 8
2020-12-02 16:52:04.947 GMT [36110] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 16:52:04.947 GMT [36110] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:53:17.774 GMT [36110] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:53:17.774 GMT [36110] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:53:17.774 GMT [36110] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:55:24.304 GMT [36110] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:55:24.304 GMT [36110] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:55:25.874 GMT [36110] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:55:25.874 GMT [36110] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:55:25.874 GMT [36110] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:55:35.669 GMT [5487] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:55:35.669 GMT [5487] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:55:35.669 GMT [5487] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:55:39.694 GMT [5487] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:55:39.694 GMT [5487] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:55:41.455 GMT [5487] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:55:41.455 GMT [5487] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:55:41.455 GMT [5487] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:55:46.202 GMT [5487] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:55:46.202 GMT [5487] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:55:46.202 GMT [5487] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:55:54.758 GMT [5487] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:55:54.758 GMT [5487] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:55:56.298 GMT [5487] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:55:56.298 GMT [5487] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:55:56.298 GMT [5487] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:56:14.530 GMT [5487] ERROR:  syntax error at or near "w" at character 1
2020-12-02 16:56:14.530 GMT [5487] STATEMENT:  w
	SELECT quantityIsSufficient(1,4);
2020-12-02 16:56:18.315 GMT [5487] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:56:18.315 GMT [5487] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:56:21.586 GMT [5487] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:56:21.586 GMT [5487] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:56:21.586 GMT [5487] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:56:50.392 GMT [22136] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:56:50.392 GMT [22136] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:56:53.972 GMT [22136] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:56:53.972 GMT [22136] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:56:53.972 GMT [22136] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:57:14.922 GMT [22136] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:57:14.922 GMT [22136] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:57:14.922 GMT [22136] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:57:15.651 GMT [22136] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 16:57:15.651 GMT [22136] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:57:15.651 GMT [22136] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 16:57:26.801 GMT [22136] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 16:57:26.801 GMT [22136] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:57:26.801 GMT [22136] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 16:58:08.779 GMT [1636] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:58:08.779 GMT [1636] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:58:20.695 GMT [4626] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 16:58:20.695 GMT [4626] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 16:58:25.316 GMT [4626] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 16:58:25.316 GMT [4626] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 16:58:25.316 GMT [4626] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 17:04:34.128 GMT [16376] ERROR:  function "quantityissufficient" already exists with same argument types
2020-12-02 17:04:34.128 GMT [16376] STATEMENT:  CREATE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 17:04:36.477 GMT [16376] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 17:04:36.477 GMT [16376] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 17:04:36.477 GMT [16376] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 17:06:06.141 GMT [39279] ERROR:  cannot change return type of existing function
2020-12-02 17:06:06.141 GMT [39279] HINT:  Use DROP FUNCTION quantityissufficient(integer,integer) first.
2020-12-02 17:06:06.141 GMT [39279] STATEMENT:  CREATE OR REPLACE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 17:06:08.765 GMT [39279] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 17:06:08.765 GMT [39279] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 17:06:08.765 GMT [39279] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 17:06:10.418 GMT [39279] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 17:06:10.418 GMT [39279] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 17:06:10.418 GMT [39279] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 17:06:10.962 GMT [39279] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 17:06:10.962 GMT [39279] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 17:06:10.962 GMT [39279] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 17:06:11.227 GMT [39279] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 17:06:11.227 GMT [39279] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 17:06:11.227 GMT [39279] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 17:06:11.962 GMT [39279] ERROR:  invalid input syntax for type integer: "t"
2020-12-02 17:06:11.962 GMT [39279] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 17:06:11.962 GMT [39279] STATEMENT:  SELECT quantityIsSufficient(1,1);
2020-12-02 17:07:20.429 GMT [20768] LOG:  received fast shutdown request
2020-12-02 17:07:20.431 GMT [20768] LOG:  aborting any active transactions
2020-12-02 17:07:20.431 GMT [17223] FATAL:  terminating connection due to administrator command
2020-12-02 17:07:20.431 GMT [17458] FATAL:  terminating connection due to administrator command
2020-12-02 17:07:20.431 GMT [3140] FATAL:  terminating connection due to administrator command
2020-12-02 17:07:20.432 GMT [20768] LOG:  background worker "logical replication launcher" (PID 20797) exited with exit code 1
2020-12-02 17:07:20.476 GMT [20792] LOG:  shutting down
2020-12-02 17:07:20.542 GMT [20768] LOG:  database system is shut down
2020-12-02 17:07:23.266 GMT [18277] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit
2020-12-02 17:07:23.272 GMT [18277] LOG:  listening on Unix socket "/dcs/19/u1813151/Documents/cs258/postgres/tmp/.s.PGSQL.5432"
2020-12-02 17:07:23.318 GMT [18284] LOG:  database system was shut down at 2020-12-02 17:07:20 GMT
2020-12-02 17:07:23.329 GMT [18277] LOG:  database system is ready to accept connections
2020-12-02 17:07:34.080 GMT [20320] ERROR:  cannot change return type of existing function
2020-12-02 17:07:34.080 GMT [20320] HINT:  Use DROP FUNCTION quantityissufficient(integer,integer) first.
2020-12-02 17:07:34.080 GMT [20320] STATEMENT:  CREATE OR REPLACE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS BOOLEAN LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient BOOLEAN;
	  BEGIN
	  SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 17:07:39.441 GMT [20320] ERROR:  function quantityissufficient() does not exist at character 8
2020-12-02 17:07:39.441 GMT [20320] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 17:07:39.441 GMT [20320] STATEMENT:  SELECT quantityIsSufficient();
2020-12-02 17:07:49.185 GMT [20320] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 17:07:49.185 GMT [20320] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) while casting return value to function's return type
2020-12-02 17:07:49.185 GMT [20320] STATEMENT:  SELECT quantityIsSufficient(1,4);
2020-12-02 17:10:26.706 GMT [23242] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 17:10:26.706 GMT [23242] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 5 at SQL statement
2020-12-02 17:10:26.706 GMT [23242] STATEMENT:  SELECT quantityIsSufficient(2,2);
2020-12-02 17:15:24.881 GMT [8488] ERROR:  cannot change return type of existing function
2020-12-02 17:15:24.881 GMT [8488] HINT:  Use DROP FUNCTION quantityissufficient(integer,integer) first.
2020-12-02 17:15:24.881 GMT [8488] STATEMENT:  CREATE OR REPLACE FUNCTION quantityIsSufficient(id INTEGER, q INTEGER)
	  RETURNS TEXT LANGUAGE plpgsql AS
	  $$
	  DECLARE
	  isSufficient TEXT;
	  BEGIN
	  SELECT ProductStockAmount > q INTO isSufficient FROM inventory WHERE ProductID = id; 
	  RETURN isSufficient;
	  END;
	  $$;
2020-12-02 17:15:27.452 GMT [8488] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 17:15:27.452 GMT [8488] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 5 at SQL statement
2020-12-02 17:15:27.452 GMT [8488] STATEMENT:  SELECT quantityIsSufficient(2,2);
2020-12-02 17:26:57.771 GMT [943] ERROR:  invalid input syntax for type integer: "f"
2020-12-02 17:26:57.771 GMT [943] CONTEXT:  PL/pgSQL function quantityissufficient(integer,integer) line 5 at SQL statement
2020-12-02 17:26:57.771 GMT [943] STATEMENT:  SELECT quantityIsSufficient(2,2);
2020-12-02 17:28:27.641 GMT [24855] ERROR:  function sufficientquantity(integer, integer) does not exist at character 8
2020-12-02 17:28:27.641 GMT [24855] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 17:28:27.641 GMT [24855] STATEMENT:  SELECT sufficientQuantity(1,2);
2020-12-02 18:19:13.833 GMT [540] ERROR:  syntax error at or near "WHERRE" at character 196
2020-12-02 18:19:13.833 GMT [540] STATEMENT:  CREATE OR REPLACE PROCEDURE reduceStock(id INTEGER, soldQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    UPDATE inventory SET ProductStockAmount = ProductStockAmount - soldQuantity WHERRE ProductID = id;     
	    END;
	    $$;
2020-12-02 18:19:30.219 GMT [540] ERROR:  procedure reducestock(integer, integer) does not exist at character 6
2020-12-02 18:19:30.219 GMT [540] HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 18:19:30.219 GMT [540] STATEMENT:  call reduceStock(1,1);
2020-12-02 18:20:10.641 GMT [540] ERROR:  syntax error at or near "WHERRE" at character 196
2020-12-02 18:20:10.641 GMT [540] STATEMENT:  CREATE OR REPLACE PROCEDURE reduceStock(id INTEGER, soldQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    UPDATE inventory SET ProductStockAmount = ProductStockAmount - soldQuantity WHERRE ProductID = id;     
	    END;
	    $$;
2020-12-02 18:20:13.299 GMT [540] ERROR:  procedure reducestock(integer, integer) does not exist at character 6
2020-12-02 18:20:13.299 GMT [540] HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 18:20:13.299 GMT [540] STATEMENT:  call reduceStock(1,1);
2020-12-02 18:20:20.035 GMT [540] ERROR:  function reducestock(integer, integer) does not exist at character 8
2020-12-02 18:20:20.035 GMT [540] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 18:20:20.035 GMT [540] STATEMENT:  SELECT reduceStock(1,1);
2020-12-02 18:25:10.934 GMT [17783] ERROR:  syntax error at or near "WHERRE" at character 196
2020-12-02 18:25:10.934 GMT [17783] STATEMENT:  CREATE OR REPLACE PROCEDURE reduceStock(id INTEGER, soldQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    UPDATE inventory SET ProductStockAmount = ProductStockAmount - soldQuantity WHERRE ProductID = id;     
	    END;
	    $$;
2020-12-02 18:25:17.314 GMT [17783] ERROR:  procedure reducestock(integer, integer) does not exist at character 6
2020-12-02 18:25:17.314 GMT [17783] HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 18:25:17.314 GMT [17783] STATEMENT:  call reduceStock(1,1);
2020-12-02 18:41:10.859 GMT [34695] ERROR:  procedure reducestock(integer, integer) does not exist at character 6
2020-12-02 18:41:10.859 GMT [34695] HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 18:41:10.859 GMT [34695] STATEMENT:  call reduceStock(1,1);
2020-12-02 18:42:11.616 GMT [9390] FATAL:  database "postgrs" does not exist
2020-12-02 18:42:20.596 GMT [11977] FATAL:  database "deptsttore" does not exist
2020-12-02 18:42:28.360 GMT [13073] ERROR:  syntax error at or near "WHERRE" at character 196
2020-12-02 18:42:28.360 GMT [13073] STATEMENT:  CREATE OR REPLACE PROCEDURE reduceStock(id INTEGER, soldQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    UPDATE inventory SET ProductStockAmount = ProductStockAmount - soldQuantity WHERRE ProductID = id;     
	    END;
	    $$;
2020-12-02 18:42:33.162 GMT [13073] ERROR:  procedure reducestock(integer, integer) does not exist at character 6
2020-12-02 18:42:33.162 GMT [13073] HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 18:42:33.162 GMT [13073] STATEMENT:  call reduceStock(1,1);
2020-12-02 18:43:14.714 GMT [13073] ERROR:  sufficientstock(integer, integer) is not a procedure at character 6
2020-12-02 18:43:14.714 GMT [13073] HINT:  To call a function, use SELECT.
2020-12-02 18:43:14.714 GMT [13073] STATEMENT:  call sufficientStock(1,1);
2020-12-02 18:43:28.930 GMT [13073] ERROR:  sufficientstock(integer, integer) is not a procedure at character 6
2020-12-02 18:43:28.930 GMT [13073] HINT:  To call a function, use SELECT.
2020-12-02 18:43:28.930 GMT [13073] STATEMENT:  call sufficientStock(1,1);
2020-12-02 18:43:39.578 GMT [13073] ERROR:  function reducestock(integer, integer) does not exist at character 8
2020-12-02 18:43:39.578 GMT [13073] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-02 18:43:39.578 GMT [13073] STATEMENT:  SELECT reduceStock(1,1);
2020-12-02 18:43:59.469 GMT [18277] LOG:  received fast shutdown request
2020-12-02 18:43:59.471 GMT [18277] LOG:  aborting any active transactions
2020-12-02 18:43:59.471 GMT [8381] FATAL:  terminating connection due to administrator command
2020-12-02 18:43:59.471 GMT [10231] FATAL:  terminating connection due to administrator command
2020-12-02 18:43:59.472 GMT [34695] FATAL:  terminating connection due to administrator command
2020-12-02 18:43:59.474 GMT [18277] LOG:  background worker "logical replication launcher" (PID 18294) exited with exit code 1
2020-12-02 18:43:59.474 GMT [18288] LOG:  shutting down
2020-12-02 18:43:59.555 GMT [18277] LOG:  database system is shut down
2020-12-02 18:44:03.335 GMT [835] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit
2020-12-02 18:44:03.339 GMT [835] LOG:  listening on Unix socket "/dcs/19/u1813151/Documents/cs258/postgres/tmp/.s.PGSQL.5432"
2020-12-02 18:44:03.376 GMT [841] LOG:  database system was shut down at 2020-12-02 18:43:59 GMT
2020-12-02 18:44:03.390 GMT [835] LOG:  database system is ready to accept connections
2020-12-02 18:44:19.929 GMT [3923] ERROR:  syntax error at or near "WHERRE" at character 196
2020-12-02 18:44:19.929 GMT [3923] STATEMENT:  CREATE OR REPLACE PROCEDURE reduceStock(id INTEGER, soldQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    UPDATE inventory SET ProductStockAmount = ProductStockAmount - soldQuantity WHERRE ProductID = id;     
	    END;
	    $$;
2020-12-02 20:20:17.774 GMT [3923] ERROR:  sufficientstock(integer, integer) is not a procedure at character 6
2020-12-02 20:20:17.774 GMT [3923] HINT:  To call a function, use SELECT.
2020-12-02 20:20:17.774 GMT [3923] STATEMENT:  call sufficientStock(1,1);
2020-12-02 21:21:02.492 GMT [17180] ERROR:  reducestock(integer, integer) is a procedure at character 15
2020-12-02 21:21:02.492 GMT [17180] HINT:  To call a procedure, use CALL.
2020-12-02 21:21:02.492 GMT [17180] STATEMENT:  select * from reduceStock($1, $2)  as result
2020-12-02 21:23:17.584 GMT [514] ERROR:  reducestock(integer, integer) is a procedure at character 15
2020-12-02 21:23:17.584 GMT [514] HINT:  To call a procedure, use CALL.
2020-12-02 21:23:17.584 GMT [514] STATEMENT:  select * from reduceStock($1, $2)  as result
2020-12-02 21:29:07.495 GMT [514] ERROR:  reducestock(integer, integer) is a procedure at character 15
2020-12-02 21:29:07.495 GMT [514] HINT:  To call a procedure, use CALL.
2020-12-02 21:29:07.495 GMT [514] STATEMENT:  select * from reduceStock($1, $2)  as result
2020-12-02 21:48:16.866 GMT [36482] ERROR:  reducestock(integer, integer) is a procedure at character 15
2020-12-02 21:48:16.866 GMT [36482] HINT:  To call a procedure, use CALL.
2020-12-02 21:48:16.866 GMT [36482] STATEMENT:  select * from reduceStock($1, $2) as result
2020-12-02 21:52:14.177 GMT [6148] ERROR:  reducestock(integer, integer) is a procedure at character 15
2020-12-02 21:52:14.177 GMT [6148] HINT:  To call a procedure, use CALL.
2020-12-02 21:52:14.177 GMT [6148] STATEMENT:  select * from reduceStock($1, $2) as result
2020-12-02 21:53:09.506 GMT [835] LOG:  received fast shutdown request
2020-12-02 21:53:13.441 GMT [835] LOG:  aborting any active transactions
2020-12-02 21:53:13.442 GMT [6148] FATAL:  terminating connection due to administrator command
2020-12-02 21:53:13.461 GMT [835] LOG:  background worker "logical replication launcher" (PID 858) exited with exit code 1
2020-12-02 21:53:13.461 GMT [847] LOG:  shutting down
2020-12-02 21:53:13.572 GMT [835] LOG:  database system is shut down
2020-12-02 21:53:19.336 GMT [22138] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit
2020-12-02 21:53:19.348 GMT [22138] LOG:  listening on Unix socket "/dcs/19/u1813151/Documents/cs258/postgres/tmp/.s.PGSQL.5432"
2020-12-02 21:53:19.446 GMT [22151] LOG:  database system was shut down at 2020-12-02 21:53:13 GMT
2020-12-02 21:53:19.462 GMT [22138] LOG:  database system is ready to accept connections
2020-12-02 21:53:55.951 GMT [27083] ERROR:  reducestock(integer, integer) is a procedure at character 15
2020-12-02 21:53:55.951 GMT [27083] HINT:  To call a procedure, use CALL.
2020-12-02 21:53:55.951 GMT [27083] STATEMENT:  select * from reduceStock($1, $2) as result
2020-12-02 22:07:58.287 GMT [23224] ERROR:  cannot drop the currently open database
2020-12-02 22:07:58.287 GMT [23224] STATEMENT:  drop database deptstore
	;
2020-12-02 22:08:05.470 GMT [4633] FATAL:  database "customers" does not exist
2020-12-02 22:08:12.845 GMT [6849] FATAL:  database "comapny" does not exist
2020-12-02 22:08:30.142 GMT [8066] ERROR:  database "deptstore" is being accessed by other users
2020-12-02 22:08:30.142 GMT [8066] DETAIL:  There is 1 other session using the database.
2020-12-02 22:08:30.142 GMT [8066] STATEMENT:  drop database deptstore
	;
2020-12-02 22:08:56.682 GMT [15330] ERROR:  table "inventory" does not exist
2020-12-02 22:08:56.682 GMT [15330] STATEMENT:  DROP TABLE inventory CASCADE;
2020-12-02 22:08:56.748 GMT [15330] ERROR:  table "orders" does not exist
2020-12-02 22:08:56.748 GMT [15330] STATEMENT:  DROP TABLE orders CASCADE;
2020-12-02 22:08:56.761 GMT [15330] ERROR:  table "order_products" does not exist
2020-12-02 22:08:56.761 GMT [15330] STATEMENT:  DROP TABLE order_products CASCADE;
2020-12-02 22:08:56.772 GMT [15330] ERROR:  table "deliveries" does not exist
2020-12-02 22:08:56.772 GMT [15330] STATEMENT:  DROP TABLE deliveries CASCADE;
2020-12-02 22:08:56.777 GMT [15330] ERROR:  table "collections" does not exist
2020-12-02 22:08:56.777 GMT [15330] STATEMENT:  DROP TABLE collections CASCADE;
2020-12-02 22:08:56.783 GMT [15330] ERROR:  table "staff" does not exist
2020-12-02 22:08:56.783 GMT [15330] STATEMENT:  DROP TABLE staff CASCADE;
2020-12-02 22:08:56.795 GMT [15330] ERROR:  table "staff_orders" does not exist
2020-12-02 22:08:56.795 GMT [15330] STATEMENT:  DROP TABLE staff_orders CASCADE;
2020-12-02 22:09:21.031 GMT [15330] ERROR:  sufficientstock(integer, integer) is not a procedure at character 6
2020-12-02 22:09:21.031 GMT [15330] HINT:  To call a function, use SELECT.
2020-12-02 22:09:21.031 GMT [15330] STATEMENT:  call sufficientStock(2,1);
2020-12-03 00:47:22.071 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 01:36:07.914 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 01:39:52.645 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 01:43:37.879 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 04:31:40.035 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 05:06:55.088 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 07:23:26.586 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 08:30:42.876 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-03 12:36:16.333 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 16:11:39.285 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 17:42:40.863 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 19:10:57.068 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 19:19:12.087 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 19:33:27.281 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 19:46:50.745 GMT [24926] ERROR:  syntax error at or near "ls" at character 1
2020-12-05 19:46:50.745 GMT [24926] STATEMENT:  ls
	;
2020-12-05 20:23:12.896 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 20:33:53.264 GMT [32519] ERROR:  sufficientstock(integer, integer) is not a procedure at character 6
2020-12-05 20:33:53.264 GMT [32519] HINT:  To call a function, use SELECT.
2020-12-05 20:33:53.264 GMT [32519] STATEMENT:  call sufficientStock($1, $2) 
2020-12-05 20:35:58.217 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 20:53:38.512 GMT [26154] ERROR:  function createneworder(character varying, character varying) does not exist at character 15
2020-12-05 20:53:38.512 GMT [26154] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 20:53:38.512 GMT [26154] STATEMENT:  select * from createNewOrder($1, $2)  as result
2020-12-05 20:54:48.927 GMT [9788] ERROR:  syntax error at or near "RETURN" at character 244
2020-12-05 20:54:48.927 GMT [9788] STATEMENT:  CREATE OR REPLACE PROCEDURE newOrder(oType TEXT, oPlace TEXT)
	    LANGUAGE plpgsql AS
	    $$ 
	    BEGIN 
	    WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlace) VALUES (oType, 0, oPlace) RETURNING orderID
	    )
	    RETURN id; 
	    END; 
	    $$;
2020-12-05 20:55:11.714 GMT [9788] ERROR:  syntax error at end of input at character 239
2020-12-05 20:55:11.714 GMT [9788] STATEMENT:  CREATE OR REPLACE PROCEDURE newOrder(oType TEXT, oPlace TEXT)
	    LANGUAGE plpgsql AS
	    $$ 
	    BEGIN 
	    WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlace) VALUES (oType, 0, oPlace) RETURNING orderID
	    );
	    RETURN id; 
	    END; 
	    $$;
2020-12-05 20:55:52.746 GMT [9788] ERROR:  RETURN cannot have a parameter in a procedure at character 266
2020-12-05 20:55:52.746 GMT [9788] STATEMENT:  CREATE OR REPLACE PROCEDURE newOrder(oType TEXT, oPlace TEXT)
	    LANGUAGE plpgsql AS
	    $$ 
	    BEGIN 
	    WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlace) VALUES (oType, 0, oPlace) RETURNING orderID
	    )
	    SELECT id;
	    RETURN id; 
	    END; 
	    $$;
2020-12-05 22:12:04.267 GMT [9788] ERROR:  function result type must be specified
2020-12-05 22:12:04.267 GMT [9788] STATEMENT:  CREATE OR REPLACE FUNCTION newOrder(oType TEXT, oPlace TEXT)
	    LANGUAGE plpgsql AS
	    $$ 
	    BEGIN 
	    WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlace) VALUES (oType, 0, oPlace) RETURNING orderID
	    )
	    SELECT id;
	    RETURN id; 
	    END; 
	    $$;
2020-12-05 22:16:08.705 GMT [9788] ERROR:  column "frick" does not exist at character 17
2020-12-05 22:16:08.705 GMT [9788] STATEMENT:  select newOrder(frick, frack)
	;
2020-12-05 22:16:22.182 GMT [9788] ERROR:  column "frick" does not exist at character 17
2020-12-05 22:16:22.182 GMT [9788] STATEMENT:  select newOrder("frick", "frack")
	;
2020-12-05 22:16:31.222 GMT [9788] ERROR:  syntax error at or near ";" at character 6
2020-12-05 22:16:31.222 GMT [9788] STATEMENT:  call
	;
2020-12-05 22:16:36.422 GMT [9788] ERROR:  syntax error at or near ";" at character 14
2020-12-05 22:16:36.422 GMT [9788] STATEMENT:  call newOrder;
2020-12-05 22:16:39.153 GMT [9788] ERROR:  procedure neworder() does not exist at character 6
2020-12-05 22:16:39.153 GMT [9788] HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 22:16:39.153 GMT [9788] STATEMENT:  call newOrder();
2020-12-05 22:16:50.822 GMT [9788] ERROR:  column "f" does not exist at character 15
2020-12-05 22:16:50.822 GMT [9788] STATEMENT:  call newOrder("f", "y");
2020-12-05 22:17:23.062 GMT [9788] ERROR:  neworder(unknown, unknown) is not a procedure at character 6
2020-12-05 22:17:23.062 GMT [9788] HINT:  To call a function, use SELECT.
2020-12-05 22:17:23.062 GMT [9788] STATEMENT:  call newOrder('ff','33');
2020-12-05 22:17:33.410 GMT [9788] ERROR:  column "orderplace" of relation "orders" does not exist at character 69
2020-12-05 22:17:33.410 GMT [9788] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlace) VALUES (oType, 0, oPlace) RETURNING orderID
	    )
	    SELECT id
2020-12-05 22:17:33.410 GMT [9788] CONTEXT:  PL/pgSQL function neworder(text,text) line 3 at SQL statement
2020-12-05 22:17:33.410 GMT [9788] STATEMENT:  select newOrder('ff','33');
2020-12-05 22:21:04.888 GMT [9788] ERROR:  column "orderplaced" is of type date but expression is of type text at character 100
2020-12-05 22:21:04.888 GMT [9788] HINT:  You will need to rewrite or cast the expression.
2020-12-05 22:21:04.888 GMT [9788] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlace) RETURNING orderID
	    )
	    SELECT id
2020-12-05 22:21:04.888 GMT [9788] CONTEXT:  PL/pgSQL function neworder(text,text) line 3 at SQL statement
2020-12-05 22:21:04.888 GMT [9788] STATEMENT:  select newOrder('ff','33');
2020-12-05 22:35:44.617 GMT [22155] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-05 22:42:18.261 GMT [23994] ERROR:  function createneworder(character varying, character varying) does not exist at character 15
2020-12-05 22:42:18.261 GMT [23994] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 22:42:18.261 GMT [23994] STATEMENT:  select * from createNewOrder($1, $2)  as result
2020-12-05 22:43:15.232 GMT [18067] ERROR:  function neworder(unknown, integer) does not exist at character 8
2020-12-05 22:43:15.232 GMT [18067] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 22:43:15.232 GMT [18067] STATEMENT:  select neworder('fred', 10);
2020-12-05 22:43:43.551 GMT [18067] ERROR:  function neworder(integer, integer) does not exist at character 8
2020-12-05 22:43:43.551 GMT [18067] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 22:43:43.551 GMT [18067] STATEMENT:  select neworder(10, 10);
2020-12-05 22:47:17.154 GMT [18067] ERROR:  column "id" does not exist at character 103
2020-12-05 22:47:17.154 GMT [18067] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType) VALUES (oType) RETURNING orderID
	    )
	    SELECT id
2020-12-05 22:47:17.154 GMT [18067] CONTEXT:  PL/pgSQL function neworder(character varying) line 3 at SQL statement
2020-12-05 22:47:17.154 GMT [18067] STATEMENT:  select neworder('10');
2020-12-05 22:47:41.583 GMT [18067] ERROR:  syntax error at or near "RETURN" at character 210
2020-12-05 22:47:41.583 GMT [18067] STATEMENT:  CREATE OR REPLACE FUNCTION newOrder(oType VARCHAR)
	    RETURNS INTEGER LANGUAGE plpgsql AS
	    $$ 
	    BEGIN 
	    WITH id AS (
	        INSERT INTO orders (orderType) VALUES (oType) RETURNING orderID
	    )
	    RETURN orderID; 
	    END; 
	    $$;
2020-12-05 22:48:02.657 GMT [18067] ERROR:  column "orderid" does not exist at character 103
2020-12-05 22:48:02.657 GMT [18067] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType) VALUES (oType) RETURNING orderID
	    )
	    SELECT orderID
2020-12-05 22:48:02.657 GMT [18067] CONTEXT:  PL/pgSQL function neworder(character varying) line 3 at SQL statement
2020-12-05 22:48:02.657 GMT [18067] STATEMENT:  select neworder('10');
2020-12-05 22:48:48.346 GMT [18067] ERROR:  column "orderid" does not exist at character 115
2020-12-05 22:48:48.346 GMT [18067] QUERY:  WITH id AS (
	        INSERT INTO orders (orderID, orderType) VALUES (9, oType) RETURNING orderID
	    )
	    SELECT orderID
2020-12-05 22:48:48.346 GMT [18067] CONTEXT:  PL/pgSQL function neworder(character varying) line 3 at SQL statement
2020-12-05 22:48:48.346 GMT [18067] STATEMENT:  select neworder('10');
2020-12-05 22:54:27.708 GMT [18067] ERROR:  syntax error at or near "RETURN" at character 257
2020-12-05 22:54:27.708 GMT [18067] STATEMENT:  CREATE OR REPLACE FUNCTION newOrder(oType VARCHAR)
	    RETURNS INTEGER LANGUAGE plpgsql AS
	    $$ 
	    DECLARE
	    newID INTEGER; 
	    BEGIN 
	    WITH newID AS (
	        INSERT INTO orders (orderID, orderType) VALUES (9, oType) RETURNING orderID
	    )
	    RETURN newID; 
	    END; 
	    $$;
2020-12-05 22:57:06.552 GMT [18067] ERROR:  null value in column "ordercompleted" violates not-null constraint
2020-12-05 22:57:06.552 GMT [18067] DETAIL:  Failing row contains (9, 10, null, null).
2020-12-05 22:57:06.552 GMT [18067] CONTEXT:  SQL statement "INSERT INTO orders (orderID, orderType) VALUES (9, oType) RETURNING orderID"
	PL/pgSQL function neworder(character varying) line 6 at SQL statement
2020-12-05 22:57:06.552 GMT [18067] STATEMENT:  select neworder('10');
2020-12-05 22:58:45.290 GMT [18067] ERROR:  duplicate key value violates unique constraint "orders_pkey"
2020-12-05 22:58:45.290 GMT [18067] DETAIL:  Key (orderid)=(9) already exists.
2020-12-05 22:58:45.290 GMT [18067] CONTEXT:  SQL statement "INSERT INTO orders (orderID, orderCompleted, orderType) VALUES (9, 0, oType) RETURNING orderID"
	PL/pgSQL function neworder(character varying) line 6 at SQL statement
2020-12-05 22:58:45.290 GMT [18067] STATEMENT:  select neworder('10');
2020-12-05 22:58:55.035 GMT [18067] ERROR:  type oplaced does not exist
2020-12-05 22:58:55.035 GMT [18067] STATEMENT:  CREATE OR REPLACE FUNCTION newOrder(oType VARCHAR, oPlaced)
	    RETURNS INTEGER LANGUAGE plpgsql AS
	    $$ 
	    DECLARE
	    newID INTEGER; 
	    BEGIN 
	    
	    INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlaced) RETURNING orderID INTO newID;
	
	    RETURN newID; 
	    END; 
	    $$;
2020-12-05 22:59:21.090 GMT [18067] ERROR:  column "orderplaced" is of type date but expression is of type text at character 100
2020-12-05 22:59:21.090 GMT [18067] HINT:  You will need to rewrite or cast the expression.
2020-12-05 22:59:21.090 GMT [18067] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlace) RETURNING orderID
	    )
	    SELECT id
2020-12-05 22:59:21.090 GMT [18067] CONTEXT:  PL/pgSQL function neworder(text,text) line 3 at SQL statement
2020-12-05 22:59:21.090 GMT [18067] STATEMENT:  select neworder('frick', 'frcak');
2020-12-05 22:59:39.657 GMT [18067] ERROR:  function neworder(unknown, integer) does not exist at character 8
2020-12-05 22:59:39.657 GMT [18067] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 22:59:39.657 GMT [18067] STATEMENT:  select neworder('frick', 1000);
2020-12-05 22:59:47.129 GMT [18067] ERROR:  function neworder(unknown, integer) does not exist at character 8
2020-12-05 22:59:47.129 GMT [18067] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 22:59:47.129 GMT [18067] STATEMENT:  select neworder('frick', 10/20/1999);
2020-12-05 23:00:13.289 GMT [18067] ERROR:  syntax error at or near "w" at character 38
2020-12-05 23:00:13.289 GMT [18067] STATEMENT:  select neworder('frick', '2008-11-11'w);
2020-12-05 23:00:16.793 GMT [18067] ERROR:  column "orderplaced" is of type date but expression is of type text at character 100
2020-12-05 23:00:16.793 GMT [18067] HINT:  You will need to rewrite or cast the expression.
2020-12-05 23:00:16.793 GMT [18067] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlace) RETURNING orderID
	    )
	    SELECT id
2020-12-05 23:00:16.793 GMT [18067] CONTEXT:  PL/pgSQL function neworder(text,text) line 3 at SQL statement
2020-12-05 23:00:16.793 GMT [18067] STATEMENT:  select neworder('frick', '2008-11-11');
2020-12-05 23:00:48.395 GMT [18067] ERROR:  function neworder(unknown, timestamp with time zone) does not exist at character 8
2020-12-05 23:00:48.395 GMT [18067] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 23:00:48.395 GMT [18067] STATEMENT:  select neworder('frick', NOW());
2020-12-05 23:01:01.513 GMT [18067] ERROR:  function datetime() does not exist at character 26
2020-12-05 23:01:01.513 GMT [18067] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 23:01:01.513 GMT [18067] STATEMENT:  select neworder('frick', datetime());
2020-12-05 23:01:10.923 GMT [18067] ERROR:  syntax error at or near ")" at character 31
2020-12-05 23:01:10.923 GMT [18067] STATEMENT:  select neworder('frick', time());
2020-12-05 23:01:21.601 GMT [18067] ERROR:  syntax error at or near ")" at character 31
2020-12-05 23:01:21.601 GMT [18067] STATEMENT:  select neworder('frick', time());
2020-12-05 23:01:26.576 GMT [18067] ERROR:  function neworder(unknown, timestamp with time zone) does not exist at character 8
2020-12-05 23:01:26.576 GMT [18067] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-05 23:01:26.576 GMT [18067] STATEMENT:  select neworder('frick', NOW());
2020-12-05 23:01:51.579 GMT [18067] ERROR:  column "current_datew" does not exist at character 26
2020-12-05 23:01:51.579 GMT [18067] STATEMENT:  select neworder('frick', CURRENT_DATEw);
2020-12-05 23:01:54.441 GMT [18067] ERROR:  column "id" does not exist at character 144
2020-12-05 23:01:54.441 GMT [18067] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlaced) RETURNING orderID
	    )
	    SELECT id
2020-12-05 23:01:54.441 GMT [18067] CONTEXT:  PL/pgSQL function neworder(text,date) line 3 at SQL statement
2020-12-05 23:01:54.441 GMT [18067] STATEMENT:  select neworder('frick', CURRENT_DATE);
2020-12-05 23:02:36.046 GMT [18067] ERROR:  syntax error at or near "99" at character 186
2020-12-05 23:02:36.046 GMT [18067] STATEMENT:  CREATE OR REPLACE FUNCTION newOrder(oType VARCHAR, oPlaced DATE)
	    RETURNS INTEGER LANGUAGE plpgsql AS
	    $$ 
	    DECLARE
	    newID INTEGER; 
	    BEGIN 
	    
	    INSERT INTO orders (99, orderType, orderCompleted, orderPlaced) VALUES (orderID, oType, 0, oPlaced) RETURNING orderID INTO newID;
	
	    RETURN newID; 
	    END; 
	    $$;
2020-12-05 23:05:01.040 GMT [18067] ERROR:  column "id" does not exist at character 144
2020-12-05 23:05:01.040 GMT [18067] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlaced) RETURNING orderID
	    )
	    SELECT id
2020-12-05 23:05:01.040 GMT [18067] CONTEXT:  PL/pgSQL function neworder(text,date) line 3 at SQL statement
2020-12-05 23:05:01.040 GMT [18067] STATEMENT:  select neworder('frick', CURRENT_DATE);
2020-12-05 23:05:32.801 GMT [18067] ERROR:  syntax error at or near "zc" at character 1
2020-12-05 23:05:32.801 GMT [18067] STATEMENT:  zc deptstore
	select neworder('frick', CURRENT_DATE);
2020-12-05 23:05:39.480 GMT [20695] ERROR:  syntax error at or near "zc" at character 1
2020-12-05 23:05:39.480 GMT [20695] STATEMENT:  zc deptstore
	select neworder('frick', CURRENT_DATE);
2020-12-05 23:05:42.909 GMT [20695] ERROR:  column "id" does not exist at character 144
2020-12-05 23:05:42.909 GMT [20695] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlaced) RETURNING orderID
	    )
	    SELECT id
2020-12-05 23:05:42.909 GMT [20695] CONTEXT:  PL/pgSQL function neworder(text,date) line 3 at SQL statement
2020-12-05 23:05:42.909 GMT [20695] STATEMENT:  select neworder('frick', CURRENT_DATE);
2020-12-05 23:05:57.017 GMT [20695] ERROR:  column "id" does not exist at character 144
2020-12-05 23:05:57.017 GMT [20695] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlaced) RETURNING orderID
	    )
	    SELECT id
2020-12-05 23:05:57.017 GMT [20695] CONTEXT:  PL/pgSQL function neworder(text,date) line 3 at SQL statement
2020-12-05 23:05:57.017 GMT [20695] STATEMENT:  select neworder('frick', CURRENT_DATE);
2020-12-05 23:06:19.344 GMT [20695] ERROR:  column "id" does not exist at character 144
2020-12-05 23:06:19.344 GMT [20695] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlaced) RETURNING orderID
	    )
	    SELECT id
2020-12-05 23:06:19.344 GMT [20695] CONTEXT:  PL/pgSQL function neworder(text,date) line 3 at SQL statement
2020-12-05 23:06:19.344 GMT [20695] STATEMENT:  select neworder('frick', CURRENT_DATE);
2020-12-05 23:06:29.716 GMT [22138] LOG:  received fast shutdown request
2020-12-05 23:06:29.718 GMT [22138] LOG:  aborting any active transactions
2020-12-05 23:06:29.718 GMT [9788] FATAL:  terminating connection due to administrator command
2020-12-05 23:06:29.718 GMT [24926] FATAL:  terminating connection due to administrator command
2020-12-05 23:06:29.718 GMT [26154] FATAL:  terminating connection due to administrator command
2020-12-05 23:06:29.718 GMT [34100] FATAL:  terminating connection due to administrator command
2020-12-05 23:06:29.718 GMT [39908] FATAL:  terminating connection due to administrator command
2020-12-05 23:06:29.718 GMT [15330] FATAL:  terminating connection due to administrator command
2020-12-05 23:06:29.722 GMT [22138] LOG:  background worker "logical replication launcher" (PID 22158) exited with exit code 1
2020-12-05 23:06:29.731 GMT [22152] LOG:  shutting down
2020-12-05 23:06:29.829 GMT [22138] LOG:  database system is shut down
2020-12-05 23:06:32.716 GMT [39278] LOG:  starting PostgreSQL 12.3 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39), 64-bit
2020-12-05 23:06:32.734 GMT [39278] LOG:  listening on Unix socket "/dcs/19/u1813151/Documents/cs258/postgres/tmp/.s.PGSQL.5432"
2020-12-05 23:06:32.823 GMT [39295] LOG:  database system was shut down at 2020-12-05 23:06:29 GMT
2020-12-05 23:06:32.837 GMT [39278] LOG:  database system is ready to accept connections
2020-12-05 23:06:44.858 GMT [40456] ERROR:  column "id" does not exist at character 144
2020-12-05 23:06:44.858 GMT [40456] QUERY:  WITH id AS (
	        INSERT INTO orders (orderType, orderCompleted, orderPlaced) VALUES (oType, 0, oPlaced) RETURNING orderID
	    )
	    SELECT id
2020-12-05 23:06:44.858 GMT [40456] CONTEXT:  PL/pgSQL function neworder(text,date) line 3 at SQL statement
2020-12-05 23:06:44.858 GMT [40456] STATEMENT:  select neworder('frick', CURRENT_DATE);
2020-12-05 23:21:43.408 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 00:58:44.711 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:04:29.874 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:12:14.784 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:15:59.798 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:18:30.039 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:18:40.471 GMT [29080] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:18:45.015 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:22:29.989 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:22:40.291 GMT [22360] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 01:27:30.097 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:01:15.315 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:11:00.656 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:11:10.986 GMT [997] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:11:15.435 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:14:49.060 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:21:49.162 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:22:49.154 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:36:34.351 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:36:44.655 GMT [38666] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:36:49.302 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:41:50.902 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:42:01.208 GMT [29186] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:44:05.920 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:44:16.211 GMT [16403] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:48:36.031 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:55:06.054 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:55:16.355 GMT [37259] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:55:21.041 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:57:36.075 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:57:46.376 GMT [29383] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 02:57:51.076 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 03:00:00.550 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 03:00:10.985 GMT [17722] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 03:00:15.532 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 03:02:31.172 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 03:04:46.284 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 04:25:32.220 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 04:26:17.397 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 04:26:27.699 GMT [6784] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 04:26:32.196 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 10:15:53.644 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 10:53:38.894 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 10:56:38.948 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 12:45:40.376 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 13:34:56.164 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 14:54:51.704 GMT [17838] ERROR:  function createneworder(character varying, character varying) does not exist at character 15
2020-12-06 14:54:51.704 GMT [17838] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-06 14:54:51.704 GMT [17838] STATEMENT:  select * from createNewOrder($1, $2)  as result
2020-12-06 14:59:57.309 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 15:01:01.315 GMT [26473] ERROR:  relation "productidsequence" already exists
2020-12-06 15:01:01.315 GMT [26473] STATEMENT:  CREATE SEQUENCE ProductIDSequence START 1 INCREMENT BY 1;
2020-12-06 15:25:42.483 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 15:29:27.393 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 15:57:17.254 GMT [16660] ERROR:  function insertorder(character varying, unknown) does not exist at character 15
2020-12-06 15:57:17.254 GMT [16660] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-06 15:57:17.254 GMT [16660] STATEMENT:  select * from insertOrder($1, $2)  as result
2020-12-06 15:57:28.076 GMT [26473] ERROR:  relation "productidsequence" already exists
2020-12-06 15:57:28.076 GMT [26473] STATEMENT:  CREATE SEQUENCE ProductIDSequence START 1 INCREMENT BY 1;
2020-12-06 15:57:28.114 GMT [26473] ERROR:  cannot change name of input parameter "q"
2020-12-06 15:57:28.114 GMT [26473] HINT:  Use DROP FUNCTION sufficientstock(integer,integer) first.
2020-12-06 15:57:28.114 GMT [26473] STATEMENT:  CREATE OR REPLACE FUNCTION sufficientStock(id INTEGER, quantity INTEGER)
	    RETURNS BOOLEAN LANGUAGE plpgsql AS
	    $$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    SELECT ProductStockAmount >= q INTO isSufficient FROM inventory WHERE ProductID = id; 
	    RETURN isSufficient;
	    END;
	    $$;
2020-12-06 15:57:28.122 GMT [26473] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 15:57:28.122 GMT [26473] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 15:59:04.374 GMT [26473] ERROR:  cannot change name of input parameter "q"
2020-12-06 15:59:04.374 GMT [26473] HINT:  Use DROP FUNCTION sufficientstock(integer,integer) first.
2020-12-06 15:59:04.374 GMT [26473] STATEMENT:  CREATE OR REPLACE FUNCTION sufficientStock(id INTEGER, quantity INTEGER)
	    RETURNS BOOLEAN LANGUAGE plpgsql AS
	    $$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    SELECT ProductStockAmount >= quantity INTO isSufficient FROM inventory WHERE ProductID = id; 
	    RETURN isSufficient;
	    END;
	    $$;
2020-12-06 15:59:04.378 GMT [26473] ERROR:  syntax error at or near "trigger" at character 62
2020-12-06 15:59:04.378 GMT [26473] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS trigger AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:00:25.264 GMT [26473] ERROR:  relation "prodidsequence" already exists
2020-12-06 16:00:25.264 GMT [26473] STATEMENT:  CREATE SEQUENCE ProdIDSequence START 1 INCREMENT BY 1;
2020-12-06 16:00:25.286 GMT [26473] ERROR:  cannot change name of input parameter "q"
2020-12-06 16:00:25.286 GMT [26473] HINT:  Use DROP FUNCTION sufficientstock(integer,integer) first.
2020-12-06 16:00:25.286 GMT [26473] STATEMENT:  CREATE OR REPLACE FUNCTION sufficientStock(id INTEGER, quantity INTEGER)
	    RETURNS BOOLEAN LANGUAGE plpgsql AS
	    $$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    SELECT ProductStockAmount >= quantity INTO isSufficient FROM inventory WHERE ProductID = id; 
	    RETURN isSufficient;
	    END;
	    $$;
2020-12-06 16:00:25.290 GMT [26473] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:00:25.290 GMT [26473] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:01:15.411 GMT [36878] ERROR:  relation "prodidsequence" already exists
2020-12-06 16:01:15.411 GMT [36878] STATEMENT:  CREATE SEQUENCE ProdIDSequence START 1 INCREMENT BY 1;
2020-12-06 16:01:15.442 GMT [36878] ERROR:  cannot change name of input parameter "q"
2020-12-06 16:01:15.442 GMT [36878] HINT:  Use DROP FUNCTION sufficientstock(integer,integer) first.
2020-12-06 16:01:15.442 GMT [36878] STATEMENT:  CREATE OR REPLACE FUNCTION sufficientStock(id INTEGER, quantity INTEGER)
	    RETURNS BOOLEAN LANGUAGE plpgsql AS
	    $$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    SELECT ProductStockAmount >= quantity INTO isSufficient FROM inventory WHERE ProductID = id; 
	    RETURN isSufficient;
	    END;
	    $$;
2020-12-06 16:01:15.451 GMT [36878] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:01:15.451 GMT [36878] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:01:45.900 GMT [36878] ERROR:  relation "prodidsequence" already exists
2020-12-06 16:01:45.900 GMT [36878] STATEMENT:  CREATE SEQUENCE ProdIDSequence START 1 INCREMENT BY 1;
2020-12-06 16:01:45.937 GMT [36878] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:01:45.937 GMT [36878] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:02:11.380 GMT [36878] ERROR:  syntax error at or near "SEQUENCE" at character 19
2020-12-06 16:02:11.380 GMT [36878] STATEMENT:  CREATE OR REPLACE SEQUENCE ProdIDSequence START 1 INCREMENT BY 1;
2020-12-06 16:02:11.408 GMT [36878] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:02:11.408 GMT [36878] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:02:43.932 GMT [36878] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:02:43.932 GMT [36878] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:02:55.456 GMT [36878] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:02:55.456 GMT [36878] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:03:03.954 GMT [36878] ERROR:  syntax error at or near "clear" at character 1
2020-12-06 16:03:03.954 GMT [36878] STATEMENT:  clear
	clear
	clear
	;
2020-12-06 16:03:31.666 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:03:31.666 GMT [14097] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:05:26.856 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:05:26.856 GMT [14097] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql AS 
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:08:13.118 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:08:13.118 GMT [14097] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    $$;
2020-12-06 16:08:13.119 GMT [14097] WARNING:  there is no transaction in progress
2020-12-06 16:08:13.119 GMT [14097] ERROR:  syntax error at or near "$$
	
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$" at character 1
2020-12-06 16:08:13.119 GMT [14097] STATEMENT:  $$
	
	CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity);
2020-12-06 16:08:13.119 GMT [14097] WARNING:  there is no transaction in progress
2020-12-06 16:08:13.120 GMT [14097] ERROR:  unterminated dollar-quoted string at or near "$$;
	
	--INSERT INTO inventory(ProductID, ProductDesc, ProductPrice, ProductStockAmount) VALUES (1, "Cap", 10.5, 5);
	INSERT INTO inventory VALUES (1, 'testing1', 1, 1);
	INSERT INTO inventory VALUES (2, 'testing2', 2, 2);
	INSERT INTO inventory VALUES (3, 'testing3', 3, 3);
	INSERT INTO inventory VALUES (4, 'testing4', 4, 4);
	
	DROP TABLE orders CASCADE;
	CREATE TABLE orders (
	    OrderID        integer not null, 
	    OrderType      varchar(30) not null, -- 'InStore', 'Collection' or 'Delivery' - should be an enum ideally
	    OrderCompleted integer not null, -- 0 or 1 
	    OrderPlaced    date, 
	    primary key (OrderID)
	);
	
	DROP TABLE order_products CASCADE;
	CREATE TABLE order_products (
	    OrderID         integer not null,
	    ProductID       integer not null, 
	    ProductQuantity integer not null, 
	    foreign key (OrderID) references orders(OrderID),
	    foreign key (ProductID) references inventory(ProductID)
	);
	
	DROP TABLE deliveries CASCADE;
	CREATE TABLE deliveries (
	    OrderID       integer not null,
	    FName         varchar(30) not null,
	    LName         varchar(30) not null,
	    House         varchar(30) not null,
	    Street        varchar(30) not null,
	    City          varchar(30) not null,
	    DeliveryDate  date,
	    foreign key (OrderID) references orders(OrderID)
	);
	
	DROP TABLE collections CASCADE;
	CREATE TABLE collections (
	    OrderID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    CollectionDate  date,
	    foreign key (OrderID) references orders(OrderID)
	);
	
	DROP TABLE staff CASCADE;
	CREATE TABLE staff (
	    StaffID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    primary key (StaffID)
	);
	
	DROP TABLE staff_orders CASCADE;
	CREATE TABLE staff_orders (
	    StaffID         integer not null,
	    OrderID         integer not null,
	    foreign key (StaffID) references staff(StaffID),
	    foreign key (OrderID) references orders(OrderID) 
	);" at character 1
2020-12-06 16:08:13.120 GMT [14097] STATEMENT:  $$;
	
	--INSERT INTO inventory(ProductID, ProductDesc, ProductPrice, ProductStockAmount) VALUES (1, "Cap", 10.5, 5);
	INSERT INTO inventory VALUES (1, 'testing1', 1, 1);
	INSERT INTO inventory VALUES (2, 'testing2', 2, 2);
	INSERT INTO inventory VALUES (3, 'testing3', 3, 3);
	INSERT INTO inventory VALUES (4, 'testing4', 4, 4);
	
	DROP TABLE orders CASCADE;
	CREATE TABLE orders (
	    OrderID        integer not null, 
	    OrderType      varchar(30) not null, -- 'InStore', 'Collection' or 'Delivery' - should be an enum ideally
	    OrderCompleted integer not null, -- 0 or 1 
	    OrderPlaced    date, 
	    primary key (OrderID)
	);
	
	DROP TABLE order_products CASCADE;
	CREATE TABLE order_products (
	    OrderID         integer not null,
	    ProductID       integer not null, 
	    ProductQuantity integer not null, 
	    foreign key (OrderID) references orders(OrderID),
	    foreign key (ProductID) references inventory(ProductID)
	);
	
	DROP TABLE deliveries CASCADE;
	CREATE TABLE deliveries (
	    OrderID       integer not null,
	    FName         varchar(30) not null,
	    LName         varchar(30) not null,
	    House         varchar(30) not null,
	    Street        varchar(30) not null,
	    City          varchar(30) not null,
	    DeliveryDate  date,
	    foreign key (OrderID) references orders(OrderID)
	);
	
	DROP TABLE collections CASCADE;
	CREATE TABLE collections (
	    OrderID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    CollectionDate  date,
	    foreign key (OrderID) references orders(OrderID)
	);
	
	DROP TABLE staff CASCADE;
	CREATE TABLE staff (
	    StaffID         integer not null,
	    FName           varchar(30) not null,
	    LName           varchar(30) not null,
	    primary key (StaffID)
	);
	
	DROP TABLE staff_orders CASCADE;
	CREATE TABLE staff_orders (
	    StaffID         integer not null,
	    OrderID         integer not null,
	    foreign key (StaffID) references staff(StaffID),
	    foreign key (OrderID) references orders(OrderID) 
	);
2020-12-06 16:08:32.262 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:08:32.262 GMT [14097] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER
	    LANGUAGE plpgsql AS 
	    $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $$;
2020-12-06 16:08:32.262 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:08:32.262 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:09:49.837 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 62
2020-12-06 16:09:49.837 GMT [14097] STATEMENT:  CREATE OR REPLACE PROCEDURE checkValidOrderProduct() RETURNS TRIGGER AS $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $$
	    LANGUAGE plpgsql;
2020-12-06 16:09:49.837 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:09:49.837 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:10:22.644 GMT [14097] ERROR:  syntax error at or near "reduceStock" at character 231
2020-12-06 16:10:22.644 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $$
	    LANGUAGE plpgsql;
2020-12-06 16:10:22.645 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:10:22.645 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:12:40.893 GMT [14097] ERROR:  syntax error at or near "reduceStock" at character 231
2020-12-06 16:12:40.893 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $$
	    BEGIN
	    IF NOT isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $$
	    LANGUAGE plpgsql;
2020-12-06 16:12:40.893 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:12:40.893 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:13:29.245 GMT [14097] ERROR:  syntax error at or near "(" at character 113
2020-12-06 16:13:29.245 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $$
	    BEGIN
	    IF NOT CALL isSufficient(NEW.ProductID, NEW.ProductQuantity) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $$
	    LANGUAGE plpgsql;
2020-12-06 16:13:29.246 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:13:29.246 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:13:48.746 GMT [14097] ERROR:  syntax error at or near "isSufficient" at character 102
2020-12-06 16:13:48.746 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $$
	    BEGIN
	    IF NOT (CALL isSufficient(NEW.ProductID, NEW.ProductQuantity)) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $$
	    LANGUAGE plpgsql;
2020-12-06 16:13:48.746 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:13:48.746 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct()
	CREATE OR REPLACE PROCEDURE insertOrderProduct(ordID INTEGER, prodID INTEGER, prodQuantity INTEGER)
	    LANGUAGE plpgsql AS
	    $$
	    BEGIN
	    INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity); 
	    END;
	    $$;
2020-12-06 16:22:42.167 GMT [14097] ERROR:  syntax error at or near "isSufficient" at character 122
2020-12-06 16:22:42.167 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    BEGIN
	    IF NOT (CALL isSufficient(NEW.ProductID, NEW.ProductQuantity)) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql;
2020-12-06 16:22:42.168 GMT [14097] ERROR:  syntax error at or near ";" at character 34
2020-12-06 16:22:42.168 GMT [14097] STATEMENT:  DROP TRIGGER orderProductsTrigger;
2020-12-06 16:22:42.168 GMT [14097] ERROR:  function checkvalidorderproduct() does not exist
2020-12-06 16:22:42.168 GMT [14097] STATEMENT:  CREATE TRIGGER orderProductsTrigger BEFORE INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 16:26:23.125 GMT [14097] ERROR:  syntax error at or near "isSufficient" at character 122
2020-12-06 16:26:23.125 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    BEGIN
	    IF NOT (CALL isSufficient(NEW.ProductID, NEW.ProductQuantity)) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql;
2020-12-06 16:26:23.125 GMT [14097] ERROR:  syntax error at or near ";" at character 34
2020-12-06 16:26:23.125 GMT [14097] STATEMENT:  DROP TRIGGER orderProductsTrigger;
2020-12-06 16:26:23.126 GMT [14097] ERROR:  function checkvalidorderproduct() does not exist
2020-12-06 16:26:23.126 GMT [14097] STATEMENT:  CREATE TRIGGER orderProductsTrigger BEFORE INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 16:29:18.904 GMT [14097] ERROR:  syntax error at or near "isSufficient" at character 122
2020-12-06 16:29:18.904 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    BEGIN
	    IF NOT (CALL isSufficient(NEW.ProductID, NEW.ProductQuantity)) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql;
2020-12-06 16:29:18.904 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:29:18.904 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 16:31:10.048 GMT [14097] ERROR:  syntax error at or near "(" at character 179
2020-12-06 16:31:10.048 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    isSufficient = CALL isSufficient(NEW.ProductID, NEW.ProductQuantity);
	    IF NOT (isSufficient THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql;
2020-12-06 16:31:10.048 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:31:10.048 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 16:31:35.809 GMT [14097] ERROR:  syntax error at or near "SELECT" at character 162
2020-12-06 16:31:35.809 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    isSufficient = SELECT isSufficient(NEW.ProductID, NEW.ProductQuantity);
	    IF NOT (isSufficient) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql;
2020-12-06 16:31:35.809 GMT [14097] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 16:31:35.809 GMT [14097] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger BEFORE INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 16:42:13.106 GMT [14097] ERROR:  syntax error at or near "END" at character 425
2020-12-06 16:42:13.106 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    isSufficient = TRUE; 
	    --isSufficient = SELECT isSufficient(NEW.ProductID, NEW.ProductQuantity);
	    IF NOT (isSufficient) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql;
2020-12-06 16:42:13.106 GMT [14097] ERROR:  function checkvalidorderproduct() does not exist
2020-12-06 16:42:13.106 GMT [14097] STATEMENT:  CREATE TRIGGER orderProductsTrigger BEFORE INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 16:43:39.317 GMT [14097] ERROR:  syntax error at or near "END" at character 400
2020-12-06 16:43:39.317 GMT [14097] STATEMENT:  CREATE OR REPLACE FUNCTION checkValidOrderProduct() RETURNS TRIGGER AS $orderProductsTrigger$
	    DECLARE
	    isSufficient BOOLEAN;
	    BEGIN
	    SELECT isSufficient(NEW.ProductID, NEW.ProductQuantity) INTO isSufficient;
	    IF NOT (isSufficient) THEN
	        RAISE EXCEPTION 'Insufficient stock to execute order';
	    ELSE 
	        CALL reduceStock(NEW.ProductID, NEW.SoldQuantity);
	    END IF
	    END; 
	    $orderProductsTrigger$
	    LANGUAGE plpgsql;
2020-12-06 16:43:39.317 GMT [14097] ERROR:  function checkvalidorderproduct() does not exist
2020-12-06 16:43:39.317 GMT [14097] STATEMENT:  CREATE TRIGGER orderProductsTrigger BEFORE INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 17:05:20.396 GMT [14097] ERROR:  insert or update on table "order_products" violates foreign key constraint "order_products_orderid_fkey"
2020-12-06 17:05:20.396 GMT [14097] DETAIL:  Key (orderid)=(10) is not present in table "orders".
2020-12-06 17:05:20.396 GMT [14097] STATEMENT:  INSERT INTO order_products VALUES (10, 11, 12);
2020-12-06 17:06:14.277 GMT [14097] ERROR:  duplicate key value violates unique constraint "orders_pkey"
2020-12-06 17:06:14.277 GMT [14097] DETAIL:  Key (orderid)=(10) already exists.
2020-12-06 17:06:14.277 GMT [14097] STATEMENT:  INSERT INTO orders VALUES (10, 'test', 0, NOW());
2020-12-06 17:06:26.828 GMT [14097] ERROR:  insert or update on table "order_products" violates foreign key constraint "order_products_productid_fkey"
2020-12-06 17:06:26.828 GMT [14097] DETAIL:  Key (productid)=(11) is not present in table "inventory".
2020-12-06 17:06:26.828 GMT [14097] STATEMENT:  INSERT INTO order_products VALUES (10, 11, 12);
2020-12-06 17:15:59.075 GMT [14097] ERROR:  insert or update on table "order_products" violates foreign key constraint "order_products_orderid_fkey"
2020-12-06 17:15:59.075 GMT [14097] DETAIL:  Key (orderid)=(10) is not present in table "orders".
2020-12-06 17:15:59.075 GMT [14097] STATEMENT:  INSERT INTO order_products VALUES (10, 1, 1);
2020-12-06 17:21:54.132 GMT [31465] ERROR:  sequence "productidsequence" does not exist
2020-12-06 17:21:54.132 GMT [31465] STATEMENT:  DROP SEQUENCE ProductIDSequence;
2020-12-06 17:21:54.218 GMT [31465] ERROR:  function sufficientstock(integer, integer) does not exist
2020-12-06 17:21:54.218 GMT [31465] STATEMENT:  DROP FUNCTION sufficientStock(integer,integer);
2020-12-06 17:27:33.570 GMT [22265] ERROR:  syntax error at or near ";" at character 16
2020-12-06 17:27:33.570 GMT [22265] STATEMENT:  CREATE TRIGGER
	;
2020-12-06 17:28:11.652 GMT [22265] ERROR:  duplicate key value violates unique constraint "orders_pkey"
2020-12-06 17:28:11.652 GMT [22265] DETAIL:  Key (orderid)=(10) already exists.
2020-12-06 17:28:11.652 GMT [22265] STATEMENT:  INSERT INTO orders VALUES (10, 'test', 0, NOW());
2020-12-06 17:28:20.252 GMT [22265] ERROR:  Insufficient stock to execute order
2020-12-06 17:28:20.252 GMT [22265] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 5 at RAISE
2020-12-06 17:28:20.252 GMT [22265] STATEMENT:  INSERT INTO order_products VALUES (10, 1, 1);
2020-12-06 17:28:41.002 GMT [22265] ERROR:  Insufficient stock to execute order
2020-12-06 17:28:41.002 GMT [22265] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 5 at RAISE
2020-12-06 17:28:41.002 GMT [22265] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:28:49.411 GMT [22265] ERROR:  Insufficient stock to execute order
2020-12-06 17:28:49.411 GMT [22265] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 5 at RAISE
2020-12-06 17:28:49.411 GMT [22265] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:28:53.521 GMT [22265] ERROR:  trigger "orderproductstrigger" for relation "order_products" already exists
2020-12-06 17:28:53.521 GMT [22265] STATEMENT:  CREATE TRIGGER orderProductsTrigger AFTER INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 17:29:45.859 GMT [2254] ERROR:  syntax error at or near "TRIGGER" at character 19
2020-12-06 17:29:45.859 GMT [2254] STATEMENT:  CREATE OR REPLACE TRIGGER orderProductsTrigger AFTER INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 17:34:22.706 GMT [2254] ERROR:  insert or update on table "order_products" violates foreign key constraint "order_products_orderid_fkey"
2020-12-06 17:34:22.706 GMT [2254] DETAIL:  Key (orderid)=(10) is not present in table "orders".
2020-12-06 17:34:22.706 GMT [2254] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:34:39.868 GMT [2254] ERROR:  function issufficient(integer, integer) does not exist at character 8
2020-12-06 17:34:39.868 GMT [2254] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-06 17:34:39.868 GMT [2254] QUERY:  SELECT isSufficient(NEW.ProductID, NEW.ProductQuantity)
2020-12-06 17:34:39.868 GMT [2254] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 5 at SQL statement
2020-12-06 17:34:39.868 GMT [2254] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:35:52.235 GMT [2254] ERROR:  trigger "orderproductstrigger" for relation "order_products" already exists
2020-12-06 17:35:52.235 GMT [2254] STATEMENT:  CREATE TRIGGER orderProductsTrigger AFTER INSERT OR UPDATE
	    ON order_products
	    FOR EACH ROW EXECUTE FUNCTION checkValidOrderProduct();
2020-12-06 17:36:00.020 GMT [2254] ERROR:  insert or update on table "order_products" violates foreign key constraint "order_products_orderid_fkey"
2020-12-06 17:36:00.020 GMT [2254] DETAIL:  Key (orderid)=(10) is not present in table "orders".
2020-12-06 17:36:00.020 GMT [2254] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:37:39.892 GMT [2254] ERROR:  insert or update on table "order_products" violates foreign key constraint "order_products_orderid_fkey"
2020-12-06 17:37:39.892 GMT [2254] DETAIL:  Key (orderid)=(10) is not present in table "orders".
2020-12-06 17:37:39.892 GMT [2254] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:41:43.540 GMT [29299] ERROR:  function issufficient(integer, integer) does not exist at character 8
2020-12-06 17:41:43.540 GMT [29299] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-06 17:41:43.540 GMT [29299] QUERY:  SELECT isSufficient(NEW.ProductID, NEW.ProductQuantity)
2020-12-06 17:41:43.540 GMT [29299] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 5 at SQL statement
2020-12-06 17:41:43.540 GMT [29299] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:43:07.702 GMT [29299] ERROR:  function issufficient(integer, integer) does not exist at character 8
2020-12-06 17:43:07.702 GMT [29299] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-06 17:43:07.702 GMT [29299] QUERY:  SELECT isSufficient(NEW.ProductID, NEW.ProductQuantity)
2020-12-06 17:43:07.702 GMT [29299] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 5 at SQL statement
2020-12-06 17:43:07.702 GMT [29299] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:43:24.157 GMT [29299] ERROR:  function issufficient(integer, integer) does not exist at character 8
2020-12-06 17:43:24.157 GMT [29299] HINT:  No function matches the given name and argument types. You might need to add explicit type casts.
2020-12-06 17:43:24.157 GMT [29299] STATEMENT:  select issufficient(1,1);
2020-12-06 17:43:28.697 GMT [29299] ERROR:  procedure issufficient(integer, integer) does not exist at character 6
2020-12-06 17:43:28.697 GMT [29299] HINT:  No procedure matches the given name and argument types. You might need to add explicit type casts.
2020-12-06 17:43:28.697 GMT [29299] STATEMENT:  call issufficient(1,1);
2020-12-06 17:44:11.516 GMT [29299] ERROR:  record "new" has no field "soldquantity"
2020-12-06 17:44:11.516 GMT [29299] CONTEXT:  SQL statement "CALL reduceStock(NEW.ProductID, NEW.SoldQuantity)"
	PL/pgSQL function checkvalidorderproduct() line 9 at CALL
2020-12-06 17:44:11.516 GMT [29299] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:44:30.009 GMT [29299] ERROR:  control reached end of trigger procedure without RETURN
2020-12-06 17:44:30.009 GMT [29299] CONTEXT:  PL/pgSQL function checkvalidorderproduct()
2020-12-06 17:44:30.009 GMT [29299] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 17:46:29.385 GMT [29299] ERROR:  Insufficient stock to execute order
2020-12-06 17:46:29.385 GMT [29299] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
2020-12-06 17:46:29.385 GMT [29299] STATEMENT:  INSERT INTO order_products VALUES (10, 2, 1);
2020-12-06 18:00:45.525 GMT [26833] ERROR:  Insufficient stock to execute order
2020-12-06 18:00:45.525 GMT [26833] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:00:45.525 GMT [26833] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:02:14.701 GMT [26833] ERROR:  Insufficient stock to execute order
2020-12-06 18:02:14.701 GMT [26833] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:02:14.701 GMT [26833] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:02:30.425 GMT [22652] ERROR:  Insufficient stock to execute order
2020-12-06 18:02:30.425 GMT [22652] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:02:30.425 GMT [22652] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:03:58.011 GMT [18466] ERROR:  Insufficient stock to execute order
2020-12-06 18:03:58.011 GMT [18466] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:03:58.011 GMT [18466] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:07:49.199 GMT [32202] ERROR:  Insufficient stock to execute order
2020-12-06 18:07:49.199 GMT [32202] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:07:49.199 GMT [32202] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:08:42.742 GMT [16918] ERROR:  Insufficient stock to execute order
2020-12-06 18:08:42.742 GMT [16918] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:08:42.742 GMT [16918] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:16:11.044 GMT [16211] ERROR:  duplicate key value violates unique constraint "orders_pkey"
2020-12-06 18:16:11.044 GMT [16211] DETAIL:  Key (orderid)=(10) already exists.
2020-12-06 18:16:11.044 GMT [16211] CONTEXT:  SQL statement "INSERT INTO orders (orderID, orderType, orderCompleted, orderPlaced) VALUES (nextval('ProductIDSequence'), oType, 0, oPlaced) RETURNING orderID"
	PL/pgSQL function insertorder(character varying,date) line 5 at SQL statement
2020-12-06 18:16:11.044 GMT [16211] STATEMENT:  select * from insertOrder($1, $2)  as result
2020-12-06 18:24:20.459 GMT [40345] ERROR:  Insufficient stock to execute order
2020-12-06 18:24:20.459 GMT [40345] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:24:20.459 GMT [40345] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:30:35.007 GMT [4339] ERROR:  insert or update on table "order_products" violates foreign key constraint "order_products_productid_fkey"
2020-12-06 18:30:35.007 GMT [4339] DETAIL:  Key (productid)=(5) is not present in table "inventory".
2020-12-06 18:30:35.007 GMT [4339] CONTEXT:  SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:30:35.007 GMT [4339] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 18:32:18.010 GMT [717] ERROR:  Insufficient stock to execute order
2020-12-06 18:32:18.010 GMT [717] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-06 18:32:18.010 GMT [717] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-06 19:49:01.175 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 20:53:02.008 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 20:53:12.335 GMT [35324] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 20:53:16.765 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:08:07.585 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:39:38.054 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:40:37.993 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:40:48.315 GMT [35621] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:40:52.935 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:47:53.045 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:50:09.089 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:51:23.145 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:51:33.454 GMT [40129] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:51:38.092 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 21:52:41.083 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 22:07:26.388 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 23:30:57.369 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 23:31:07.676 GMT [24871] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-06 23:31:12.365 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-07 00:07:42.819 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-07 09:16:19.239 GMT [22867] ERROR:  Insufficient stock to execute order
2020-12-07 09:16:19.239 GMT [22867] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 09:16:19.239 GMT [22867] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 09:17:08.301 GMT [22867] ERROR:  Insufficient stock to execute order
2020-12-07 09:17:08.301 GMT [22867] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 09:17:08.301 GMT [22867] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 09:17:27.352 GMT [22867] ERROR:  Insufficient stock to execute order
2020-12-07 09:17:27.352 GMT [22867] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 09:17:27.352 GMT [22867] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 09:17:27.353 GMT [22867] ERROR:  current transaction is aborted, commands ignored until end of transaction block
2020-12-07 09:17:27.353 GMT [22867] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 09:22:00.933 GMT [33076] ERROR:  Insufficient stock to execute order
2020-12-07 09:22:00.933 GMT [33076] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 09:22:00.933 GMT [33076] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 09:28:04.416 GMT [39569] ERROR:  Insufficient stock to execute order
2020-12-07 09:28:04.416 GMT [39569] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 09:28:04.416 GMT [39569] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 09:33:50.206 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-07 09:33:53.720 GMT [6799] ERROR:  Insufficient stock to execute order
2020-12-07 09:33:53.720 GMT [6799] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 09:33:53.720 GMT [6799] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 09:41:43.502 GMT [40340] ERROR:  Insufficient stock to execute order
2020-12-07 09:41:43.502 GMT [40340] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 09:41:43.502 GMT [40340] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 10:00:24.631 GMT [2898] ERROR:  relation "stafforders" does not exist at character 13
2020-12-07 10:00:24.631 GMT [2898] QUERY:  INSERT INTO staffOrders (StaffID, OrderID) VALUES (staffID, orderID)
2020-12-07 10:00:24.631 GMT [2898] CONTEXT:  PL/pgSQL function insertstafforder(integer,integer) line 3 at SQL statement
	SQL statement "CALL insertStaffOrder(staffID, newID)"
	PL/pgSQL function insertorder(character varying,date,integer) line 6 at CALL
2020-12-07 10:00:24.631 GMT [2898] STATEMENT:  select * from insertOrder($1, $2, $3)  as result
2020-12-07 10:01:04.001 GMT [17852] ERROR:  insert or update on table "staff_orders" violates foreign key constraint "staff_orders_staffid_fkey"
2020-12-07 10:01:04.001 GMT [17852] DETAIL:  Key (staffid)=(4) is not present in table "staff".
2020-12-07 10:01:04.001 GMT [17852] CONTEXT:  SQL statement "INSERT INTO staff_orders (StaffID, OrderID) VALUES (staffID, orderID)"
	PL/pgSQL function insertstafforder(integer,integer) line 3 at SQL statement
	SQL statement "CALL insertStaffOrder(staffID, newID)"
	PL/pgSQL function insertorder(character varying,date,integer) line 6 at CALL
2020-12-07 10:01:04.001 GMT [17852] STATEMENT:  select * from insertOrder($1, $2, $3)  as result
2020-12-07 10:08:35.623 GMT [19910] ERROR:  INSERT has more expressions than target columns at character 46
2020-12-07 10:08:35.623 GMT [19910] STATEMENT:  INSERT INTO staff_orders VALUES (4, 'James', 'Smith');
2020-12-07 10:17:48.271 GMT [36124] ERROR:  insert or update on table "staff_orders" violates foreign key constraint "staff_orders_staffid_fkey"
2020-12-07 10:17:48.271 GMT [36124] DETAIL:  Key (staffid)=(5) is not present in table "staff".
2020-12-07 10:17:48.271 GMT [36124] CONTEXT:  SQL statement "INSERT INTO staff_orders (StaffID, OrderID) VALUES (staffID, orderID)"
	PL/pgSQL function insertstafforder(integer,integer) line 3 at SQL statement
	SQL statement "CALL insertStaffOrder(staffID, newID)"
	PL/pgSQL function insertorder(character varying,date,integer) line 6 at CALL
2020-12-07 10:17:48.271 GMT [36124] STATEMENT:  select * from insertOrder($1, $2, $3)  as result
2020-12-07 10:22:05.850 GMT [30661] LOG:  using stale statistics instead of current ones because stats collector is not responding
2020-12-07 12:43:12.288 GMT [10918] ERROR:  column "ordorid" of relation "orders" does not exist at character 21
2020-12-07 12:43:12.288 GMT [10918] QUERY:  INSERT INTO orders (OrdOrID, OrderType, OrderCompleted, orderPlaced) VALUES (nextval('ProductIDSequence'), orderType, orderCompleted, orderPlaced) RETURNING OrderID
2020-12-07 12:43:12.288 GMT [10918] CONTEXT:  PL/pgSQL function insertorder(character varying,date,integer,integer) line 5 at SQL statement
2020-12-07 12:43:12.288 GMT [10918] STATEMENT:  select * from insertOrder($1, $2, $3, $4)  as result
2020-12-07 12:45:32.607 GMT [17392] ERROR:  Insufficient stock to execute order
2020-12-07 12:45:32.607 GMT [17392] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 12:45:32.607 GMT [17392] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 13:46:30.289 GMT [33187] ERROR:  Insufficient stock to execute order
2020-12-07 13:46:30.289 GMT [33187] CONTEXT:  PL/pgSQL function checkvalidorderproduct() line 7 at RAISE
	SQL statement "INSERT INTO order_products (OrderID, ProductID, ProductQuantity) VALUES (ordID, prodID, prodQuantity)"
	PL/pgSQL function insertorderproduct(integer,integer,integer) line 3 at SQL statement
2020-12-07 13:46:30.289 GMT [33187] STATEMENT:  call insertOrderProduct($1, $2, $3)
2020-12-07 13:46:44.569 GMT [19910] ERROR:  relation "inventor" does not exist at character 15
2020-12-07 13:46:44.569 GMT [19910] STATEMENT:  select * from inventor;
2020-12-07 13:46:46.401 GMT [19910] ERROR:  syntax error at or near "y" at character 1
2020-12-07 13:46:46.401 GMT [19910] STATEMENT:  y
	select * from inventory;
2020-12-07 13:48:24.121 GMT [39302] LOG:  using stale statistics instead of current ones because stats collector is not responding
